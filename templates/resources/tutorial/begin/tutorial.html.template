<!DOCTYPE html>
<html>
<head>
  <title>Cordova Media Example</title>

  <link rel="stylesheet" href="stylesheets/ratchet-steroids.css" />
  <link rel="stylesheet" href="stylesheets/application.css" />

  <script src="javascripts/onerror.js"></script>

  <script src="components/jquery/jquery.min.js"></script>
  <script src="vendor/hammerjs/jquery.hammer.min.js"></script>

  <!-- EXCERCISE 1: You found it! As you can see below, cordova.js is served from http://localhost/ â€“ it doesn't even exist in the project files on your disk. The localhost server is running inside the Steroids app on your device. Since Steroids knows which platform it is running on, it can correctly serve either the iOS or Android version of cordova.js. -->
  <script src="http://localhost/appgyver/cordova.js"></script>
</head>
<body>
  <div class="content content-padded">

  <h1>Awesome, welcome!</h1>

  <p>So far you've mastered that:</p>

  <p>1) Pressing enter in the Steroids console (opened via <code>$ steroids connect</code>) or using <code>$ steroids push</code> lets you push changes made in your app to all connected devices.</p>

  <p>2) The <code>steroids.config.location</code> property in <code>config/application.coffee</code> sets up the initial view of your app.</p>

  <p> Let's dig deeper.</p>

  <h2>Accessing Cordova</h2>

  <p>Steroids gives you full access to Cordova's APIs. Let's try out one straight away:</p>

  <a class="button-block" onclick="askForConfirm()">navigator.notification.confirm</a>

  <p>Next, time for a few short excercises.</p>

  <h2>Excercise 1</h2>

  <p>Steroids comes bundled with several examples demonstarting Cordova APIs and other features of Steroids.</p>

  <p>In your project folder, type</p>

  <p><small><code>$ steroids generate example camera</code></small></p>

  <p>Follow the instructions, test out the camera example and then return to this tutorial.</p>

  <h2>Exercise 2</h2>

  <p>Steroids lets you automatically load the correct version of <code>cordova.js</code>, regardless of your platform (i.e. iOS or Android). Find out how we do this by looking at the source code of this document at <code>www/tutorial.html</code>.</p>

  <h2>Excercise 3</h2>

  <p>Certain app-wide properties are set up via the <code>www/config.xml</code> file. Open it, find the <code>DisallowOverscroll</code> preference and change its value to <code>true</code>. Refresh your changes: hit enter in the Steroids console (or type <code>$ steroids push</code>.</p>

    <p>After your app reloads, the 'rubber-band' effect (or glow effect on Android) that happens when you try to scroll past a view's edge is disabled.</p>

  <h2>All done!</h2>

  <p>Let's move on to the next tutorial. Write </p>

  <p><small><code>$ steroids generate tutorial resource</code></small></p>

  <p>and follow the instructions.</p>
  </div>

  <script>
  // Inlining JavaScript like this is generally a bad idea and done here only for brevity.

  function askForConfirm(){
    // Steroids-enhanced Cordova API documentation can be found at http://docs.appgyver.com
    navigator.notification.confirm("", null, "Cool, huh?", "Yes,No");
  }

  </script>
</body>
</html>
